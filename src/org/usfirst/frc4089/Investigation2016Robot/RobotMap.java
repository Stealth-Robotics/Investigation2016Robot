// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Investigation2016Robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DoubleSolenoid driveTrainLeftDriveShifter;
    public static DoubleSolenoid driveTrainRightDriveShifter;
    public static DigitalInput driveTrainLeftLinePseudoLimit;
    public static DigitalInput driveTrainRightLinePseudoLimit;
    public static CANTalon driveTrainMDrive1;
    public static CANTalon driveTrainMDrive2;
    public static CANTalon driveTrainMDrive3;
    public static CANTalon driveTrainMDrive4;
    public static RobotDrive driveTrainRDrive;
    public static Encoder driveTrainQuadEncoderLeft;
    public static Encoder driveTrainQuadEncoderRight;
    public static DoubleSolenoid spinShooterSpinShooterElevate;
    public static Solenoid spinShooterSpinSolenoid;
    public static CANTalon spinShooterLeftSpin;
    public static CANTalon spinShooterRightSpin;
    public static DigitalInput barClimbLSTop;
    public static DigitalInput barClimbLSBot;
    public static CANTalon barClimbWinchMotor;
    public static DoubleSolenoid barClimbDSRaiseLower;
    public static CANTalon collectorMCollectorActuation;
    public static DigitalInput collectorLSCollectorOut;
    public static DigitalInput collectorLSCollectorStage;
    public static DigitalInput collectorLSCollectorIn;
    public static CANTalon collectorMCollectorWheel;
    public static AnalogGyro sensorsAnalogGyro1;
    public static DigitalInput sensorsDigitalAccel;
    public static AnalogInput sensorsmaxSonar;
    public static AnalogInput sensorstemp;
    public static AnalogAccelerometer sensorsanAccel;
    public static AnalogPotentiometer pusherPotLift;
    public static CANTalon pusherMLiftAngle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftDriveShifter = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("DriveTrain", "LeftDriveShifter", driveTrainLeftDriveShifter);
        
        driveTrainRightDriveShifter = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("DriveTrain", "RightDriveShifter", driveTrainRightDriveShifter);
        
        driveTrainLeftLinePseudoLimit = new DigitalInput(2);
        LiveWindow.addSensor("DriveTrain", "LeftLinePseudoLimit", driveTrainLeftLinePseudoLimit);
        
        driveTrainRightLinePseudoLimit = new DigitalInput(3);
        LiveWindow.addSensor("DriveTrain", "RightLinePseudoLimit", driveTrainRightLinePseudoLimit);
        
        driveTrainMDrive1 = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "MDrive1", driveTrainMDrive1);
        
        driveTrainMDrive2 = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "MDrive2", driveTrainMDrive2);
        
        driveTrainMDrive3 = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "MDrive3", driveTrainMDrive3);
        
        driveTrainMDrive4 = new CANTalon(4);
        LiveWindow.addActuator("DriveTrain", "MDrive4", driveTrainMDrive4);
        
        driveTrainRDrive = new RobotDrive(driveTrainMDrive1, driveTrainMDrive2,
              driveTrainMDrive3, driveTrainMDrive4);
        
        driveTrainRDrive.setSafetyEnabled(true);
        driveTrainRDrive.setExpiration(0.1);
        driveTrainRDrive.setSensitivity(0.5);
        driveTrainRDrive.setMaxOutput(1.0);

        driveTrainRDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainQuadEncoderLeft = new Encoder(10, 11, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "QuadEncoderLeft", driveTrainQuadEncoderLeft);
        driveTrainQuadEncoderLeft.setDistancePerPulse(1.0);
        driveTrainQuadEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        driveTrainQuadEncoderRight = new Encoder(12, 13, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "QuadEncoderRight", driveTrainQuadEncoderRight);
        driveTrainQuadEncoderRight.setDistancePerPulse(1.0);
        driveTrainQuadEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        spinShooterSpinShooterElevate = new DoubleSolenoid(1, 0, 1);
        LiveWindow.addActuator("SpinShooter", "SpinShooterElevate", spinShooterSpinShooterElevate);
        
        spinShooterSpinSolenoid = new Solenoid(1, 6);
        LiveWindow.addActuator("SpinShooter", "SpinSolenoid", spinShooterSpinSolenoid);
        
        spinShooterLeftSpin = new CANTalon(5);
        LiveWindow.addActuator("SpinShooter", "LeftSpin", spinShooterLeftSpin);
        
        spinShooterRightSpin = new CANTalon(6);
        LiveWindow.addActuator("SpinShooter", "RightSpin", spinShooterRightSpin);
        
        barClimbLSTop = new DigitalInput(4);
        LiveWindow.addSensor("BarClimb", "LSTop", barClimbLSTop);
        
        barClimbLSBot = new DigitalInput(5);
        LiveWindow.addSensor("BarClimb", "LSBot", barClimbLSBot);
        
        barClimbWinchMotor = new CANTalon(8);
        LiveWindow.addActuator("BarClimb", "WinchMotor", barClimbWinchMotor);
        
        barClimbDSRaiseLower = new DoubleSolenoid(1, 2, 3);
        LiveWindow.addActuator("BarClimb", "DSRaiseLower", barClimbDSRaiseLower);
        
        collectorMCollectorActuation = new CANTalon(10);
        LiveWindow.addActuator("Collector", "MCollectorActuation", collectorMCollectorActuation);
        
        collectorLSCollectorOut = new DigitalInput(0);
        LiveWindow.addSensor("Collector", "LSCollectorOut", collectorLSCollectorOut);
        
        collectorLSCollectorStage = new DigitalInput(8);
        LiveWindow.addSensor("Collector", "LSCollectorStage", collectorLSCollectorStage);
        
        collectorLSCollectorIn = new DigitalInput(1);
        LiveWindow.addSensor("Collector", "LSCollectorIn", collectorLSCollectorIn);
        
        collectorMCollectorWheel = new CANTalon(11);
        LiveWindow.addActuator("Collector", "MCollectorWheel", collectorMCollectorWheel);
        
        sensorsAnalogGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("Sensors", "AnalogGyro1", sensorsAnalogGyro1);
        sensorsAnalogGyro1.setSensitivity(0.007);
        sensorsDigitalAccel = new DigitalInput(6);
        LiveWindow.addSensor("Sensors", "DigitalAccel", sensorsDigitalAccel);
        
        sensorsmaxSonar = new AnalogInput(4);
        LiveWindow.addSensor("Sensors", "maxSonar", sensorsmaxSonar);
        
        sensorstemp = new AnalogInput(2);
        LiveWindow.addSensor("Sensors", "temp", sensorstemp);
        
        sensorsanAccel = new AnalogAccelerometer(3);
        LiveWindow.addSensor("Sensors", "anAccel", sensorsanAccel);
        sensorsanAccel.setSensitivity(0.0);
        sensorsanAccel.setZero(2.5);
        pusherPotLift = new AnalogPotentiometer(1, 3600.0, 0.0);
        LiveWindow.addSensor("Pusher", "PotLift", pusherPotLift);
        
        pusherMLiftAngle = new CANTalon(12);
        LiveWindow.addActuator("Pusher", "MLiftAngle", pusherMLiftAngle);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
